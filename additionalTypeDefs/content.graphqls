extend type Query {
  """
  Performs a semantic search with the specified search term. Returns at most `count` results. If a courseWhitelist is 
  provided, only results from the specified courses will be returned.
  """
  semanticSearch(queryText: String!, count: Int! = 10, courseWhitelist: [UUID!]): [SemanticSearchResult!]! # resolved in content.ts

  """
  Returns semantic search results of entities that are semantically similar to the entity with the specified ID.
  Returns at most `count` results. If `excludeEntitiesWithSameParent` is true, segments from the same entity as the
  specified segment will be excluded from the results.
  """
  getSemanticallySimilarEntities(segmentId: UUID!, 
                                 count: Int! = 10, 
                                 excludeEntitiesWithSameParent: Boolean,
                                 courseWhitelist: [UUID!]): [SemanticSearchResult!]! # resolved in content.ts
}

extend type AssessmentSemanticSearchResult {
  """
  The assessment this search result is referencing.
  """
  assessment: Assessment! @resolveTo(
    sourceName: "ContentService",
    sourceTypeName: "Query",
    sourceFieldName: "contentsByIds",
    keyField: "assessmentId",
    keysArg: "ids"
  )
}

extend type Section {
  """
  The chapter this section is part of.
  """
  chapter: Chapter! @resolveTo(
    sourceName: "CourseService",
    sourceTypeName: "Query",
    sourceFieldName: "_internal_noauth_chaptersByIds",
    keyField: "chapterId",
    keysArg: "ids"
  )
}

extend type MediaContent {
  """
  The media records linked to this media content.
  """
  mediaRecords: [MediaRecord!]! @resolveTo(
    sourceName: "MediaService",
    sourceTypeName: "Query",
    sourceFieldName: "mediaRecordsByContentIds",
    keyField: "id",
    keysArg: "contentIds"
  )

  """
  Links between segments of the media records that are part of this media content.
  A link is created if the segments show the same thing, i.e. a video segment and a
  PDF page are linked if the graphics match (i.e. the PDF is shown on-screen in the
  video.)
  """
  segmentLinks: [MediaRecordSegmentLink!]! @resolveTo(
    sourceName: "DocprocaiService",
    sourceTypeName: "Query",
    sourceFieldName: "_internal_noauth_getMediaRecordLinksForContent",
    requiredSelectionSet: "{ id }",
    sourceArgs: {
      contentId: "{root.id}"
    }
  )

  """
  The progress of processing the media content. In particular when processing is done,
  links between segments of the content's media records will have been created (the ones
  which can be retrieved via the MediaContent.segmentLinks field).
  """
  aiProcessingProgress: AiEntityProcessingProgress! @resolveTo(
    sourceName: "DocprocaiService",
    sourceTypeName: "Query",
    sourceFieldName: "_internal_noauth_getContentsAiProcessingProgress",
    keyField: "id",
    keysArg: "contentIds"
  ) 
}

extend type FlashcardSetAssessment {
  """
  The FlashcardSet of the assessment.
  """
  flashcardSet: FlashcardSet @resolveTo(
    sourceName: "FlashcardService",
    sourceTypeName: "Query",
    sourceFieldName: "findFlashcardSetsByAssessmentIds",
    keyField: "id",
    keysArg: "assessmentIds"
  )

  """
  The progress of processing the assessment. In particular when processing is done,
  the assessment's task contents will have been indexed for search.
  """
  aiProcessingProgress: AiEntityProcessingProgress! @resolveTo(
    sourceName: "DocprocaiService",
    sourceTypeName: "Query",
    sourceFieldName: "_internal_noauth_getContentsAiProcessingProgress",
    keyField: "id",
    keysArg: "contentIds"
  )

  """
  Tags suggested for this assessment by the AI system.
  """
  suggestedTags: [String!]! @resolveTo(
    sourceName: "DocprocaiService",
    sourceTypeName: "Query",
    sourceFieldName: "_internal_noauth_getAssessmentSuggestedTags",
    requiredSelectionSet: "{ id }",
    sourceArgs: {
      assessmentId: "{root.id}"
    }
  )
}

extend type FlashcardSet {
  """
  The content this FlashcardSet belongs to.
  """
  content: Content @resolveTo(
    sourceName: "ContentService",
    sourceTypeName: "Query",
    sourceFieldName: "contentsByIds",
    keyField: "assessmentId",
    keysArg: "ids"
  )
}

extend type QuizAssessment {
  """
  The quiz of the assessment.
  If this is null the system is in an inconsistent state and the assessment should be deleted.
  """
  quiz: Quiz @resolveTo(
    sourceName: "QuizService",
    sourceTypeName: "Query",
    sourceFieldName: "findQuizzesByAssessmentIds",
    keyField: "id",
    keysArg: "assessmentIds"
  )

  """
  The progress of processing the assessment. In particular when processing is done,
  the assessment's task contents will have been indexed for search.
  """
  aiProcessingProgress: AiEntityProcessingProgress! @resolveTo(
    sourceName: "DocprocaiService",
    sourceTypeName: "Query",
    sourceFieldName: "_internal_noauth_getContentsAiProcessingProgress",
    keyField: "id",
    keysArg: "contentIds"
  )

  """
  Tags suggested for this assessment by the AI system.
  """
  suggestedTags: [String!]! @resolveTo(
    sourceName: "DocprocaiService",
    sourceTypeName: "Query",
    sourceFieldName: "_internal_noauth_getAssessmentSuggestedTags",
    requiredSelectionSet: "{ id }",
    sourceArgs: {
      assessmentId: "{root.id}"
    }
  )
}

extend type Quiz {
  """
  The content this quiz belongs to.
  """
  content: Content @resolveTo(
    sourceName: "ContentService",
    sourceTypeName: "Query",
    sourceFieldName: "contentsByIds",
    keyField: "assessmentId",
    keysArg: "ids"
  )
}

extend type AssignmentAssessment {
  """
  The assignment of the assessment.
  If this is null the system is in an inconsistent state and the assessment should be deleted.
  """
  assignment: Assignment @resolveTo(
    sourceName: "AssignmentService",
    sourceTypeName: "Query",
    sourceFieldName: "findAssignmentsByAssessmentIds",
    keyField: "id",
    keysArg: "assessmentIds"
  )

  """
  The progress of processing the assessment. In particular when processing is done,
  the assessment's task contents will have been indexed for search.
  """
  aiProcessingProgress: AiEntityProcessingProgress! @resolveTo(
    sourceName: "DocprocaiService",
    sourceTypeName: "Query",
    sourceFieldName: "_internal_noauth_getContentsAiProcessingProgress",
    keyField: "id",
    keysArg: "contentIds"
  )

  """
  Tags suggested for this assessment by the AI system.
  """
  suggestedTags: [String!]! @resolveTo(
    sourceName: "DocprocaiService",
    sourceTypeName: "Query",
    sourceFieldName: "_internal_noauth_getAssessmentSuggestedTags",
    requiredSelectionSet: "{ id }",
    sourceArgs: {
      assessmentId: "{root.id}"
    }
  )
}

extend type Assignment {
  """
  The content this assignment belongs to.
  """
  content: Content @resolveTo(
    sourceName: "ContentService",
    sourceTypeName: "Query",
    sourceFieldName: "contentsByIds",
    keyField: "assessmentId",
    keysArg: "ids"
  )
}

extend type ContentMetadata {
  """
  The course this content belongs to.
  """
  course: Course! @resolveTo(
    sourceName: "CourseService",
    sourceTypeName: "Query",
    sourceFieldName: "coursesByIds",
    keyField: "courseId",
    keysArg: "ids"
  )
  """
  The chapter this content belongs to.
  """
  chapter: Chapter! @resolveTo(
    sourceName: "CourseService",
    sourceTypeName: "Query",
    sourceFieldName: "_internal_noauth_chaptersByIds",
    keyField: "chapterId",
    keysArg: "ids"
  )
}

extend type Mutation {
  """
  Creates a new media content and links the given media records to it.
  """
  createMediaContentAndLinkRecords(contentInput: CreateMediaContentInput!, mediaRecordIds: [UUID!]!): MediaContent! # resolved in content.ts

  """
  Creates a new quiz assessment and a new, linked quiz with the given properties.
  """
  createQuizAssessment(assessmentInput: CreateAssessmentInput!, quizInput: CreateQuizInput!): QuizAssessment! # resolved in content.ts

  """
  Creates a new submission exercise assessment and a new, linked submission exercise with the given properties.
  """
  createSubmissionAssessment(assessmentInput: CreateAssessmentInput!, submissionExerciseInput: InputSubmissionExercise!): SubmissionAssessment! # resolved in content.ts


    """
  Creates a new flashcard set assessment and a new, linked flashcard set with the given properties.
  """
  createFlashcardSetAssessment(assessmentInput: CreateAssessmentInput!, flashcardSetInput: CreateFlashcardSetInput!): FlashcardSetAssessment # resolved in content.ts

  """
  Creates a new assignment assessment and a new, linked assignment with the given properties.
  """
  createAssignmentAssessment(assessmentInput: CreateAssessmentInput!, assignmentInput: CreateAssignmentInput!): AssignmentAssessment! # resolved in content.ts

}