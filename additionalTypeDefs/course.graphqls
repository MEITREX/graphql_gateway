extend type Course {
  """
  The reward scores of this course for the currently logged in user.
  """
  rewardScores: RewardScores! @resolveTo(
    sourceName: "RewardService",
    sourceTypeName: "Query",
    sourceFieldName: "userCourseRewardScores",
    requiredSelectionSet: "{ id }",
    sourceArgs: {
      courseId: "{root.id}"
    }
  )

  """
  The scoreboard containing the power scores of the members of this course.
  """
  scoreboard: [ScoreboardItem!]! @resolveTo(
    sourceName: "RewardService",
    sourceTypeName: "Query",
    sourceFieldName: "scoreboard",
    requiredSelectionSet: "{ id }",
    sourceArgs: {
      courseId: "{root.id}"
    }
  )

  """
  The media records which are linked to this course.
  """
  mediaRecords: [MediaRecord!]! @resolveTo(
    sourceName: "MediaService",
    sourceTypeName: "Query",
    sourceFieldName: "mediaRecordsForCourses",
    keyField: "id",
    keysArg: "courseIds"
  )

  """
  Suggests content of the course which the current user should
  learn next (both new content and content to repeat).
  """
  suggestions(
    """
    The amount of suggestions to generate in total.
    """
    amount: Int!,
    """
    Only suggestions for these skill types will be generated.
    If no skill types are given, suggestions for all skill types will be generated,
    also containing suggestions for media content (which do not have a skill type).
    """
    skillTypes: [SkillType!]! = []
  ): [Suggestion!]! # resolved in course.ts

  """
  The progress of the current user in this course.
  """
  userProgress: CompositeProgressInformation! # resolved in course.ts

  skills: [Skill!]! @resolveTo(
    sourceName: "ContentService",
    sourceTypeName: "Query",
    sourceFieldName: "_internal_noauth_achievableSkillsByCourseIds",
    keyField: "id",
    keysArg: "courseIds"
  )


}

extend type Chapter {
  """
  Contents of this chapter.
  """
  contents: [Content!]! @resolveTo(
    sourceName: "ContentService",
    sourceTypeName: "Query",
    sourceFieldName: "contentsByChapterIds",
    keyField: "id",
    keysArg: "chapterIds"


  )

  """
  Contents of this chapter which are not in any section.
  """
  contentsWithNoSection: [Content!]! @resolveTo(
    sourceName: "ContentService",
    sourceTypeName: "Query",
    sourceFieldName: "_internal_noauth_contentWithNoSectionByChapterIds",
    keyField: "id",
    keysArg: "chapterIds"
  )

  """
  Sections of this chapter.
  """
  sections: [Section!]! @resolveTo(
    sourceName: "ContentService",
    sourceTypeName: "Query",
    sourceFieldName: "_internal_noauth_sectionsByChapterIds",
    keyField: "id",
    keysArg: "chapterIds"
  )

  """
  The skill types which are achievable in this chapter.
  A skill type is achievable if there is at least one assessment in this chapter with this skill type.
  """
  achievableSkillTypes: [SkillType]! @resolveTo(
    sourceName: "ContentService",
    sourceTypeName: "Query",
    sourceFieldName: "_internal_noauth_achievableSkillTypesByChapterIds",
    keyField: "id",
    keysArg: "chapterIds"
  )

  """
  The progress of the current user in this chapter.
  """
  userProgress: CompositeProgressInformation! @resolveTo(
    sourceName: "ContentService",
    sourceTypeName: "Query",
    sourceFieldName: "_internal_noauth_progressByChapterIds",
    keyField: "id",
    keysArg: "chapterIds"
  )


  skills: [Skill]! @resolveTo(
    sourceName: "ContentService",
    sourceTypeName: "Query",
    sourceFieldName: "_internal_noauth_achievableSkillsByChapterIds",
    keyField: "id",
    keysArg: "chapterIds"
  )
}

extend type CourseMembership {
  """
  The user of this course membership.
  """
  user: PublicUserInfo @resolveTo(
    sourceName: "UserService",
    sourceTypeName: "Query",
    sourceFieldName: "findPublicUserInfos",
    keyField: "userId",
    keysArg: "ids"
  )
}

extend type Mutation {
  """
  Creates a new section in a chapter.
  """
  createSection(input: CreateSectionInput!): Section! # resolved in course.ts
}

extend type Skill {
  """
  The skill levels of the current user in this chapter.
  """
  skillLevels: SkillLevels @resolveTo(
    sourceName: "SkilllevelService",
    sourceTypeName: "Query",
    sourceFieldName: "_internal_noauth_usersSkillLevelBySkillIds",
    keyField: "id",
    keysArg: "skillIds"
  )
}