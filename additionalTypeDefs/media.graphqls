extend type Query {
  """
  Performs a semantic search with the specified search term. Returns at most `count` results. If a courseWhitelist is 
  provided, only results from the specified courses will be returned.
  """
  semanticSearch(queryText: String!, count: Int! = 10, courseWhitelist: [UUID!]): [SemanticSearchResult!]! # resolved in media.ts

  """
  Returns the media record segments that are semantically similar to the media record segment with the specified ID.
  Returns at most `count` results. If `excludeOwnMediaRecord` is true, segments from the same media record as the
  specified segment will be excluded from the results.
  """
  getSemanticallySimilarMediaRecordSegments(mediaRecordSegmentId: UUID!, 
                                            count: Int! = 10, 
                                            excludeOwnMediaRecord: Boolean): [SemanticSearchResult!]! # resolved in media.ts
}

extend type DocumentRecordSegment {
  """
  The media record this segment is part of.
  """
  mediaRecord: MediaRecord! @resolveTo(
    sourceName: "MediaService",
    sourceTypeName: "Query",
    sourceFieldName: "mediaRecordsByIds",
    keyField: "mediaRecordId",
    keysArg: "ids"
  )
}

extend type VideoRecordSegment {
  """
  The media record this segment is part of.
  """
  mediaRecord: MediaRecord! @resolveTo(
    sourceName: "MediaService",
    sourceTypeName: "Query",
    sourceFieldName: "mediaRecordsByIds",
    keyField: "mediaRecordId",
    keysArg: "ids"
  )
}

extend type MediaRecord {
  """
  Returns the contents this media record is linked to. If the user does not have access to a particular
  content, null will be returned in its place.
  """
  contents: [Content]! @resolveTo(
    sourceName: "ContentService",
    sourceTypeName: "Query",
    sourceFieldName: "findContentsByIds",
    requiredSelectionSet: "{ contentIds }",
    sourceArgs: {
      ids: "{root.contentIds}"
    }
  )

  """
  Returns the segments this media record consists of.
  """
  segments: [MediaRecordSegment!]! @resolveTo(
    sourceName: "DocprocaiService",
    sourceTypeName: "Query",
    sourceFieldName: "_internal_noauth_getMediaRecordSegments",
    requiredSelectionSet: "{ id }",
    sourceArgs: {
      mediaRecordId: "{root.id}"
    }
  )

  """
  Returns a closed captions string formatted in WebVTT format for the media record if it is of type video,
  returns null otherwise.
  """
  closedCaptions: String @resolveTo(
    sourceName: "DocprocaiService",
    sourceTypeName: "Query",
    sourceFieldName: "_internal_noauth_getMediaRecordCaptions",
    requiredSelectionSet: "{ id }",
    sourceArgs: {
      mediaRecordId: "{root.id}"
    }
  )
}